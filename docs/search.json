[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Report Title",
    "section": "",
    "text": "1 Report",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#prepared-for",
    "href": "index.html#prepared-for",
    "title": "Report Title",
    "section": "1.1 Prepared For",
    "text": "1.1 Prepared For",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "Report Title",
    "section": "1.2 Problem Statement",
    "text": "1.2 Problem Statement",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "Report Title",
    "section": "1.3 Analysis",
    "text": "1.3 Analysis",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "Report Title",
    "section": "1.4 Conclusion",
    "text": "1.4 Conclusion",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Report</span>"
    ]
  },
  {
    "objectID": "datacleaning.html",
    "href": "datacleaning.html",
    "title": "2  Data Cleaning",
    "section": "",
    "text": "2.1 Data Description\nThe data for this report is taken from the Catapult wearable used by the University of Virginia Men’s Basketball Team. To maintain player privacy, the data provided was simulated from the actual data, and the players’ identities were anonymized.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#loading-in-the-data",
    "href": "datacleaning.html#loading-in-the-data",
    "title": "2  Data Cleaning",
    "section": "2.2 Loading in the Data",
    "text": "2.2 Loading in the Data\nThis code chunk loads in the catapult data for each season from the data folder. Then, data from each season is marked with a season indicator column, before being combined into a single dataset. Next, the columns of the data are limited to the variables relevant for this study.\n\n# Imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\n# Loading in data from season 1 and 2\ns1 = pd.read_csv(\"./data/catapult season 1.csv\")\ns2 = pd.read_csv(\"./data/catapult season 2.csv\")\n\n# Adding column with season to each dataset\ns1[\"Season\"] = 1\ns2[\"Season\"] = 2\n\n# Combining the two seasons of data into a single data frame\ndata = pd.concat([s1, s2])\n\n# Converting date column to datetime\ndata[\"Date\"] = pd.to_datetime(data[\"Date\"])\n\n# List of Variables Relevant to our Project\ncolumns_of_interest = [\"Date\", \"About\", \"Period\", \"IMA Jump Count Low Band\", \"IMA Jump Count Med Band\", \"IMA Jump Count High Band\", \"Season\"]\n\n# Filtering data frame to include only relevant variables\ndata = data[columns_of_interest]\n\n# Showing first row\ndata.head(1)\n\n\n\n\n\n\n\n\nDate\nAbout\nPeriod\nIMA Jump Count Low Band\nIMA Jump Count Med Band\nIMA Jump Count High Band\nSeason\n\n\n\n\n0\n2023-03-14\nAthlete I\n1. Pre Practice\n0\n17\n5\n1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#selecting-the-game-data",
    "href": "datacleaning.html#selecting-the-game-data",
    "title": "2  Data Cleaning",
    "section": "2.3 Selecting the Game Data",
    "text": "2.3 Selecting the Game Data\nNext, the dataset is limited to include only data from game periods. Overtime periods are removed from the data as well, to standardize the game length to two halves.\n\n# Filtering to include 'Period' - the keyword for game periods\ngames = data[data[\"Period\"].str.contains(\"Period\") == True]\n\n# Filtering to exclude 'Play' - a keyword which also has period used for scrimmages\ngames = games[games[\"Period\"].str.contains(\"Play\") == False]\n\n# Filtering to exclude 'Auto' - a keyword used to code periods that are automatically coded\ngames = games[games[\"Period\"].str.contains(\"Auto\") == False]\n\n# Filtering to exclude 'Period 3' - these are overtime periods, not relevant to work\ngames = games[games[\"Period\"].str.contains(\"Period 3\") == False]\n\n# Renaming the periods to be easier to understand\ngames.loc[games[\"Period\"].str.contains(\"Period 1\"), \"Period\"] = \"Game Half 1\"\ngames.loc[games[\"Period\"].str.contains(\"Period 2\"), \"Period\"] = \"Game Half 2\"\n\n# Showing first 2 rows of temp data frame\ngames.sort_values(by = [\"Date\", \"About\"]).head(2)\n\n\n\n\n\n\n\n\nDate\nAbout\nPeriod\nIMA Jump Count Low Band\nIMA Jump Count Med Band\nIMA Jump Count High Band\nSeason\n\n\n\n\n12285\n2022-11-07\nAthlete A\nGame Half 1\n10\n5\n6\n1\n\n\n12286\n2022-11-07\nAthlete A\nGame Half 2\n6\n1\n3\n1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#aggregating-statistics",
    "href": "datacleaning.html#aggregating-statistics",
    "title": "2  Data Cleaning",
    "section": "2.4 Aggregating Statistics",
    "text": "2.4 Aggregating Statistics\nIn its original format, the data for each game is split between halves. This code chunk limits the data to include only games where the player plays both halves, then properly aggregates the stats from the two halves into a single game value.\n\n# Number of halves by player by date. This will be used to filter out games where the player played only  1 half \nhalf_counts = games.groupby(['Date', 'About', 'Season'])['Period'].count().reset_index(name = 'Half Count')\n\n# Adding half_counts to the games df\ngames = games.merge(half_counts, on = ['Date', 'About', 'Season'])\n\n# Filtering out games that don't have 2 halves played by the player\nfull_games = games[games['Half Count'] == 2]\n\n# Aggregating the values\ngames_agg = full_games.groupby(['Date', 'About', 'Season'], as_index = False).agg(\n    {\n    'IMA Jump Count Low Band' : 'sum',\n    'IMA Jump Count Med Band' : 'sum',\n    'IMA Jump Count High Band' : 'sum',\n    })\n\n# Putting Period label back in to match scrims data frame when merged\ngames_agg['Period'] = 'Game'\n\n# Re-ordering columns\ncolumns = ['Date', 'About', 'Period', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band', 'IMA Jump Count High Band', 'Season']\ngames_agg = games_agg[columns]\n\n# Showing row of df\ngames_agg.head(1)\n\n\n\n\n\n\n\n\nDate\nAbout\nPeriod\nIMA Jump Count Low Band\nIMA Jump Count Med Band\nIMA Jump Count High Band\nSeason\n\n\n\n\n0\n2022-11-07\nAthlete A\nGame\n16\n6\n9\n1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "datacleaning.html#finalizing-the-dataset",
    "href": "datacleaning.html#finalizing-the-dataset",
    "title": "2  Data Cleaning",
    "section": "2.5 Finalizing the Dataset",
    "text": "2.5 Finalizing the Dataset\nLastly, proportion versions of the cumulative statistics tracked by Catapult were added to the data set. Because playing time varies greatly by player, using cumulative totals would have been misleading, so this allows for the proportion of each statistic to be examined. The final data set is then saved into the data folder to be used for EDA and visualization.\n\n# Reassigning the main data frame as the working games df\ndata = games_agg\n\n# Making variables to hold  jump proportions\ndata[\"Prop_Jump_High\"] = data[\"IMA Jump Count High Band\"] / (data[\"IMA Jump Count High Band\"] + data[\"IMA Jump Count Low Band\"] + data[\"IMA Jump Count Med Band\"])\ndata[\"Prop_Jump_Med\"] = data[\"IMA Jump Count Med Band\"] / (data[\"IMA Jump Count High Band\"] + data[\"IMA Jump Count Low Band\"] + data[\"IMA Jump Count Med Band\"])\ndata[\"Prop_Jump_Low\"] = data[\"IMA Jump Count Low Band\"] / (data[\"IMA Jump Count High Band\"] + data[\"IMA Jump Count Low Band\"] + data[\"IMA Jump Count Med Band\"])\n\n# Getting rid of Ben Vander Plas, who presumably shouldn't have his name in the data\ndata = data[data[\"About\"] != \"Ben Vander Plas\"]\n\n# Re-ordering columns\ncolumns = ['Date', 'About', 'Period', 'IMA Jump Count Low Band', 'IMA Jump Count Med Band', 'IMA Jump Count High Band', \"Prop_Jump_Low\", \"Prop_Jump_Med\", \"Prop_Jump_High\", 'Season']\ndata = data[columns]\n\n# Saving the cleaned data\ndata.to_csv('./data/cleaned_data.csv', index = False)\n\n# Showing first 3 rows of combined data\ndata.head(3)\n\n\n\n\n\n\n\n\nDate\nAbout\nPeriod\nIMA Jump Count Low Band\nIMA Jump Count Med Band\nIMA Jump Count High Band\nProp_Jump_Low\nProp_Jump_Med\nProp_Jump_High\nSeason\n\n\n\n\n0\n2022-11-07\nAthlete A\nGame\n16\n6\n9\n0.516129\n0.193548\n0.290323\n1\n\n\n1\n2022-11-07\nAthlete C\nGame\n29\n14\n6\n0.591837\n0.285714\n0.122449\n1\n\n\n2\n2022-11-07\nAthlete D\nGame\n35\n11\n22\n0.514706\n0.161765\n0.323529\n1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "3  Exploratory Data Analysis",
    "section": "",
    "text": "3.1 Descriptive Statistics\ndata.iloc[:, :-1].describe()\n\n\n\n\n\n\n\n\nDate\nIMA Jump Count Low Band\nIMA Jump Count Med Band\nIMA Jump Count High Band\nProp_Jump_Low\nProp_Jump_Med\nProp_Jump_High\n\n\n\n\ncount\n528\n528.000000\n528.000000\n528.000000\n527.000000\n527.000000\n527.000000\n\n\nmean\n2023-07-29 09:24:32.727272704\n27.371212\n13.712121\n11.892045\n0.512964\n0.261650\n0.225386\n\n\nmin\n2022-11-07 00:00:00\n0.000000\n0.000000\n0.000000\n0.227273\n0.000000\n0.000000\n\n\n25%\n2023-01-28 00:00:00\n17.000000\n9.000000\n6.000000\n0.448276\n0.206116\n0.170732\n\n\n50%\n2023-11-06 00:00:00\n25.000000\n13.000000\n11.000000\n0.507937\n0.258621\n0.225000\n\n\n75%\n2024-01-13 00:00:00\n35.000000\n18.000000\n16.000000\n0.580331\n0.314006\n0.283300\n\n\nmax\n2024-03-09 00:00:00\n92.000000\n45.000000\n42.000000\n0.788462\n0.566667\n0.500000\n\n\nstd\nNaN\n14.456323\n7.042598\n7.108918\n0.100650\n0.081823\n0.092229",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#distributions",
    "href": "eda.html#distributions",
    "title": "3  Exploratory Data Analysis",
    "section": "3.2 Distributions",
    "text": "3.2 Distributions\n\n# Initializing Figure\nplt.figure(figsize = (10, 6))\n\n# Histogram and KDE of Low Band Jump Proportion\nsns.histplot(data['Prop_Jump_Low'], kde = True)\n\n# Adding title and axis labels\nplt.title(\"Distribution of Low Band Jump Proportions\")\nplt.xlabel(\"Low Band Jump Proportion\")\nplt.ylabel(\"Frequency\")\n\n# Showing Plot\nplt.show()\n\n\n\n\n\n\n\n\n\n# Initializing Figure\nplt.figure(figsize = (10, 6))\n\n# Histogram and KDE of Medium Band Jump Proportion\nsns.histplot(data['Prop_Jump_Med'], kde = True)\n\n# Adding title and axis labels\nplt.title(\"Distribution of Medium Band Jump Proportions\")\nplt.xlabel(\"Medium Band Jump Proportion\")\nplt.ylabel(\"Frequency\")\n\n# Showing Plot\nplt.show()\n\n\n\n\n\n\n\n\n\n# Initializing Figure\nplt.figure(figsize = (10, 6))\n\n# Histogram and KDE of High Band Jump Proportion\nsns.histplot(data['Prop_Jump_High'], kde = True)\n\n# Adding title and axis labels\nplt.title(\"Distribution of High Band Jump Proportions\")\nplt.xlabel(\"High Band Jump Proportion\")\nplt.ylabel(\"Frequency\")\n\n# Showing Plot\nplt.show()\n\n\n\n\n\n\n\n\n\n# Initializing Figure\nplt.figure(figsize = (10, 6))\n\n# Melting data frame\ndata_melted = data.melt(value_vars = ['Prop_Jump_Low', 'Prop_Jump_Med', 'Prop_Jump_High'], var_name = 'Band', value_name = 'Proportion')\n\n# Box Plot of Jump Counts by Band\nsns.boxplot(x = 'Band', y = 'Proportion', data = data_melted)\n\n# Adding title\nplt.title(\"Distribution of Jump Proportions by Band\")\nplt.xticks()\n\n# Showing plot\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#change-over-time",
    "href": "eda.html#change-over-time",
    "title": "3  Exploratory Data Analysis",
    "section": "3.3 Change Over Time",
    "text": "3.3 Change Over Time\n\n# Melting dfs\ns1 = data[data[\"Season\"] == 1]\ns1_melted = s1.melt(id_vars = 'Date', value_vars = ['Prop_Jump_Low', 'Prop_Jump_Med', 'Prop_Jump_High'], var_name = 'Jump Band', value_name = 'Proportion')\n\ns2 = data[data[\"Season\"] == 2]\ns2_melted = s2.melt(id_vars = 'Date', value_vars = ['Prop_Jump_Low', 'Prop_Jump_Med', 'Prop_Jump_High'], var_name = 'Jump Band', value_name = 'Proportion')\n\n# Creating Figure and Flattening Axes\nfig, axs = plt.subplots(1, 2, figsize = (20, 10), sharey = True)\naxs = axs.flatten()\n\n# Looping through subplots, dfs, and seasons\nfor ax, df, s in zip(axs, [s1_melted, s2_melted], [1, 2]):\n    plot = sns.lineplot(df, x = 'Date', y = 'Proportion', hue = 'Jump Band', errorbar = ('ci', False), ax = ax)\n    ax.set_title(f\"Season {s} Jump Band Proportions over Time\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Proportion\")\n    selected_dates = pd.date_range(start=df['Date'].min(), end=df['Date'].max(), periods=4)\n    ax.set_xticks(selected_dates)\n    ax.set_xticklabels([d.strftime('%Y-%m') for d in selected_dates])\n\n\n# Showing plot\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "eda.html#correlations",
    "href": "eda.html#correlations",
    "title": "3  Exploratory Data Analysis",
    "section": "3.4 Correlations",
    "text": "3.4 Correlations",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "4  Data Visualization",
    "section": "",
    "text": "4.1 Making Visualization 1",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#making-visualization-1",
    "href": "dataviz.html#making-visualization-1",
    "title": "4  Data Visualization",
    "section": "",
    "text": "4.1.1 Getting Rolling Averages for Visualization 1\n\n# This code chunk retrieves the n-game (7-game) rolling average of proportion of low, med, and high band jumps\n\n# Empty list to hold rolling_averages data\nrolling_averages = []\n\n# Variable for number of games in rolling average\nwindow = 7\n\n# Looping through each group of the df, where the groups are by player\nfor player, group in data.groupby(\"About\"):\n    # Ensuring the dates are in the correct order for the rolling average calculation\n    group = group.sort_values(by = \"Date\")\n\n    # Calculating the rolling averages, over window games, and assigning that to the new column made for that value\n    group[\"Prop_Jump_High\"]= group[\"Prop_Jump_High\"].rolling(window, min_periods = 1).mean()\n    group[\"Prop_Jump_Med\"]= group[\"Prop_Jump_Med\"].rolling(window, min_periods = 1).mean()\n    group[\"Prop_Jump_Low\"]= group[\"Prop_Jump_Low\"].rolling(window, min_periods = 1).mean()\n\n    # Appending the group to the list of groups to be put in a df later\n    rolling_averages.append(group)\n\n# Concatenating the rolling average groups. Each player/group is essentially a row in this new dataframe\nrolling_df = pd.concat(rolling_averages)\n\n# Filtering out players who have played less than 15 games, as our analysis requires a pretty large sample size\n\n# Getting game count by player\nplayer_games = rolling_df[\"About\"].value_counts()\n# Getting the players who have played more than 15 games\nplayers_met_min_games = player_games[player_games &gt;= 15].index\n# Limiting rolling_df to only players in the list of players who have played 15 games\nrolling_df = rolling_df[rolling_df[\"About\"].isin(players_met_min_games)]\nprint(len(rolling_df[\"About\"].unique()))\n\n15\n\n\n\n\n4.1.2 Creating Visualization 1 Color Palette\n\n# Getting the number of seasons per player, and getting a list of players who are in both seasons\nplayers_seasons = rolling_df.groupby('About')['Season'].nunique()\nplayers_in_both = players_seasons[players_seasons &gt; 1].index.tolist()\n\n# Getting list of all players\nplayers = rolling_df['About'].unique()\n\n# Making a palette where players in 1 season are orange, and players in 2 seasons are navy\npalette = {player : ('orange' if player in players_in_both else 'lightgray') for player in players}\n\n\n\n4.1.3 Generating and Saving Visualization 1\n\n# Creating Figure and Flattening Axes\nfig, axs = plt.subplots(1, 2, figsize = (30, 10), sharey = True)\naxs = axs.flatten()\n\n# Looping through subplots and seasons\nfor ax, season in zip(axs, [1, 2]):\n    # Making plot of proportion of jumps in high band by player, for each season\n    plot = sns.lineplot(data = rolling_df[rolling_df[\"Season\"] == season], x = 'Date', y = \"Prop_Jump_High\", hue = \"About\", palette = palette, ax = ax)\n    plot_c = sns.lineplot(data = rolling_df[(rolling_df[\"Season\"] == season) & (rolling_df[\"About\"] == \"Athlete C\")], x = \"Date\", y = \"Prop_Jump_High\", color = 'navy', ax = ax)\n    ax.set_title(f\"Season {season} Rolling Average of High-Band Jump Proportion\", weight = 'bold')\n    sns.despine(top = True, right = True, ax = ax)\n\none_season_patch = mpatches.Patch(color = 'lightgray', label = 'One Season')\ntwo_season_patch = mpatches.Patch(color = 'orange', label = 'Two Seasons')\nathlete_c_patch = mpatches.Patch(color = \"navy\", label = \"Athlete C\")\n\nfor ax in axs:\n    ax.legend(handles = [one_season_patch, two_season_patch, athlete_c_patch], title = 'Player Seasons', loc = 'upper right')\n\n# Showing plots\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#making-visualization-2",
    "href": "dataviz.html#making-visualization-2",
    "title": "4  Data Visualization",
    "section": "4.2 Making Visualization 2",
    "text": "4.2 Making Visualization 2\n\n4.2.1 Creating “Adjusted_Day” Variable\n\n# Making a new variable which tells whether or not the player is in both seasons or just one\nrolling_df['Player_Group'] = rolling_df['About'].apply(lambda x: 'both_seasons' if x in players_in_both else 'one_season')\n\n# Getting the start date for each season\nseason_starts = rolling_df.groupby('Season')['Date'].min().to_dict()\n\n# Getting the number of days into the season for each season\nrolling_df['Day_of_Season'] = rolling_df.apply(lambda row: (row['Date'] - season_starts[row['Season']]).days + 1, axis=1)\n\n# Getting last day of season 1\nseason1_length = (rolling_df[rolling_df['Season'] == 1]['Date'].max() - season_starts[1]).days + 1\n\n# Function adds the number of days in the first season to the day in the second season\n    # This prevents for example the 5th day in the second season and the 5th day in the first season being seen as the same day\ndef adjust_day(row):\n    if row['Player_Group'] == 'both_seasons' and row['Season'] == 2:\n        return row['Day_of_Season'] + season1_length\n    else:\n        return row['Day_of_Season']\n\n# Adding the first season length to the second seasons\nrolling_df['Adjusted_Day'] = rolling_df.apply(adjust_day, axis=1)\n\n\n\n4.2.2 Generating and Saving Visualization\n\n# Filter for Athlete C\nAthlete_C = rolling_df[rolling_df[\"About\"] == \"Athlete C\"]\n\n# Plot both seasons on a single real-time timeline using Adjusted_Day\nplt.figure(figsize=(14, 6))\n\nsns.lineplot(data=Athlete_C, x='Adjusted_Day', y='Prop_Jump_High', marker='o', color='navy', label='High')\nsns.lineplot(data=Athlete_C, x='Adjusted_Day', y='Prop_Jump_Low', marker='o', color='orange', label='Low')\n\n# Optional: draw line at the transition between Season 1 and Season 2\nseason1_len = (rolling_df[rolling_df['Season'] == 1]['Date'].max() - rolling_df[rolling_df['Season'] == 1]['Date'].min()).days + 1\nplt.axvline(season1_len, linestyle='--', color='lightgray', label='Season Break')\n\nplt.title(\"Athlete C Combined Seasons Jump Band Proportions (7-Game Rolling Avg)\", fontsize=16)\nplt.xlabel(\"Adjusted Day\")\nplt.ylabel(\"Proportion of Jumps\")\nplt.legend(title='Jump Band')\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#making-visualization-3",
    "href": "dataviz.html#making-visualization-3",
    "title": "4  Data Visualization",
    "section": "4.3 Making Visualization 3",
    "text": "4.3 Making Visualization 3\n\n4.3.1 Getting Daily Averages\n\n# Grouping by day of the season and whether or not the player was in both seasons, then taking the mean of the prop_jump_high\ndaily_means = rolling_df.groupby(['Adjusted_Day', 'Player_Group'])['Prop_Jump_High'].mean().reset_index()\n\n\n\n4.3.2 Getting Regression Lines for 1 and 2 Season Players\n\n# Making a dataframe to hold the required linear regression values\nlinreg_df = pd.DataFrame(columns=[\"Player_Group\", \"Slope\", \"Intercept\", \"R-value\"])\n\n# Looping through each unique player group\nfor group in daily_means[\"Player_Group\"].unique():\n    # Selecting the relevant data for the current player group\n    group_data = daily_means[daily_means[\"Player_Group\"] == group]\n    \n    # Running linear regression on Adjusted_Day vs Prop_Jump_High\n    slope, intercept, r_value, p_value, std_err = stats.linregress(group_data['Adjusted_Day'], group_data['Prop_Jump_High'])\n    \n    # Adding the linear regression results to the DataFrame\n    linreg_df.loc[len(linreg_df)] = [group, slope, intercept, r_value]\n\n# Showing the table with linear regression results\nlinreg_df.head()\n\n\n\n\n\n\n\n\nPlayer_Group\nSlope\nIntercept\nR-value\n\n\n\n\n0\nboth_seasons\n0.000110\n0.230065\n0.391916\n\n\n1\none_season\n-0.000136\n0.216189\n-0.268255\n\n\n\n\n\n\n\n\n\n4.3.3 Generating and Saving Visualization 3\n\n# Making palette for below plot\npalette = {\n    \"both_seasons\" : \"navy\",\n    \"one_season\" : \"orange\"\n}\n\n# Making linear regression plot of prop_jump_high by # seasons played\nsns.lmplot(\n    data = daily_means,\n    x = 'Adjusted_Day',\n    y = 'Prop_Jump_High',\n    hue = 'Player_Group',\n    palette = palette,\n    markers = [\"o\", \"s\"],\n    scatter_kws = {\"s\": 50, \"alpha\": 0.5},\n    height = 6,\n    aspect = 2\n)\n\nplt.axvline(x = season1_length, color = 'lightgray', linestyle = '--', label = \"Season Break\")\nplt.title('Change in Mean Proportion of Jumps in High Band by Day for One and Two Season Players')\nplt.xlabel('Adjusted Day')\nplt.ylabel('Mean Proportion of Jumps in High Band')\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "5  Data Dictionary",
    "section": "",
    "text": "Variable Name\nDescription\nType\nExample Value\n\n\n\n\nDate\nDate of the Catapult Measurement\nDatetime\n2022-11-07\n\n\nAdjusted_Day\nDays since the start of the first season. For two season players, the first day of the second season is one “day” after the end of the first\nInt\n50\n\n\nAbout\nPlayer Identifier\nString\n“Athlete A”\n\n\nPeriod\nType of Session Measurement is Made in\nString\n“Game”\n\n\nProp_Jump_Low\nThe proportion of total jumps measured which fall in the low band (0 to 20cm)\nFloat\n0.516\n\n\nProp_Jump_Med\nThe proportion of total jumps measured which fall in the medium band (&gt;20cm to 40cm)\nFloat\n0.194\n\n\nProp_Jump_High\nThe proportion of total jumps measured which fall in the high band (&gt;40cm)\nFloat\n0.290",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  }
]