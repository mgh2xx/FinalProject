---
title: "Exploratory Data Analysis"
format: html
---

```{python}
#| echo: false
#| warning: false
#| message: false

# Imports
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

# Loading in data
data = pd.read_csv('./data/cleaned_data.csv')

# Converting date to datetime
data["Date"] = pd.to_datetime(data["Date"])
```

## Descriptive Statistics

```{python}
data.iloc[:, :-1].describe()
```

## Distributions

```{python}
# Initializing Figure
plt.figure(figsize = (10, 6))

# Histogram and KDE of Low Band Jump Proportion
sns.histplot(data['Prop_Jump_Low'], kde = True)

# Adding title and axis labels
plt.title("Distribution of Low Band Jump Proportions")
plt.xlabel("Low Band Jump Proportion")
plt.ylabel("Frequency")

# Showing Plot
plt.show()
```

```{python}
# Initializing Figure
plt.figure(figsize = (10, 6))

# Histogram and KDE of Medium Band Jump Proportion
sns.histplot(data['Prop_Jump_Med'], kde = True)

# Adding title and axis labels
plt.title("Distribution of Medium Band Jump Proportions")
plt.xlabel("Medium Band Jump Proportion")
plt.ylabel("Frequency")

# Showing Plot
plt.show()
```

```{python}
# Initializing Figure
plt.figure(figsize = (10, 6))

# Histogram and KDE of High Band Jump Proportion
sns.histplot(data['Prop_Jump_High'], kde = True)

# Adding title and axis labels
plt.title("Distribution of High Band Jump Proportions")
plt.xlabel("High Band Jump Proportion")
plt.ylabel("Frequency")

# Showing Plot
plt.show()
```

```{python}
# Initializing Figure
plt.figure(figsize = (10, 6))

# Melting data frame
data_melted = data.melt(value_vars = ['Prop_Jump_Low', 'Prop_Jump_Med', 'Prop_Jump_High'], var_name = 'Band', value_name = 'Proportion')

# Box Plot of Jump Counts by Band
sns.boxplot(x = 'Band', y = 'Proportion', data = data_melted)

# Adding title
plt.title("Distribution of Jump Proportions by Band")
plt.xticks()

# Showing plot
plt.show()
```

## Change Over Time 

```{python}
# Melting dfs
s1 = data[data["Season"] == 1]
s1_melted = s1.melt(id_vars = 'Date', value_vars = ['Prop_Jump_Low', 'Prop_Jump_Med', 'Prop_Jump_High'], var_name = 'Jump Band', value_name = 'Proportion')

s2 = data[data["Season"] == 2]
s2_melted = s2.melt(id_vars = 'Date', value_vars = ['Prop_Jump_Low', 'Prop_Jump_Med', 'Prop_Jump_High'], var_name = 'Jump Band', value_name = 'Proportion')

# Creating Figure and Flattening Axes
fig, axs = plt.subplots(2, 1, figsize = (10, 10), sharey = True)
axs = axs.flatten()

# Looping through subplots, dfs, and seasons
for ax, df, s in zip(axs, [s1_melted, s2_melted], [1, 2]):
    plot = sns.lineplot(df, x = 'Date', y = 'Proportion', hue = 'Jump Band', errorbar = ('ci', False), ax = ax)
    ax.set_title(f"Season {s} Jump Band Proportions over Time")
    ax.set_xlabel("Date")
    ax.set_ylabel("Proportion")
    dates = df['Date'].sort_values().unique()
    tick_dates = np.linspace(0, len(dates) - 1, 4, dtype=int)
    selected_dates = dates[tick_dates]
    ax.set_xticks(selected_dates)
    ax.set_xticklabels([d.strftime('%Y-%m') for d in selected_dates])


# Showing plot
plt.show()
```

## Correlations
```{python}

```