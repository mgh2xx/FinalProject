{"title":"Data Visualization","markdown":{"yaml":{"title":"Data Visualization","format":"html"},"headingText":"Imports","containsRefs":false,"markdown":"\n\n```{python}\n#| echo: false\n#| warning: false\n#| message: false\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport matplotlib.patches as mpatches\nfrom scipy import stats\n\n# Loading in data\ndata = pd.read_csv('./data/cleaned_data.csv')\n\n# Converting date to datetime\ndata[\"Date\"] = pd.to_datetime(data[\"Date\"])\n```\n\n## Making Visualization 1\n\n### Getting Rolling Averages for Visualization 1\n```{python}\n# This code chunk retrieves the n-game (7-game) rolling average of proportion of low, med, and high band jumps\n\n# Empty list to hold rolling_averages data\nrolling_averages = []\n\n# Variable for number of games in rolling average\nwindow = 7\n\n# Looping through each group of the df, where the groups are by player\nfor player, group in data.groupby(\"About\"):\n    # Ensuring the dates are in the correct order for the rolling average calculation\n    group = group.sort_values(by = \"Date\")\n\n    # Calculating the rolling averages, over window games, and assigning that to the new column made for that value\n    group[\"Prop_Jump_High\"]= group[\"Prop_Jump_High\"].rolling(window, min_periods = 1).mean()\n    group[\"Prop_Jump_Med\"]= group[\"Prop_Jump_Med\"].rolling(window, min_periods = 1).mean()\n    group[\"Prop_Jump_Low\"]= group[\"Prop_Jump_Low\"].rolling(window, min_periods = 1).mean()\n\n    # Appending the group to the list of groups to be put in a df later\n    rolling_averages.append(group)\n\n# Concatenating the rolling average groups. Each player/group is essentially a row in this new dataframe\nrolling_df = pd.concat(rolling_averages)\n\n# Filtering out players who have played less than 15 games, as our analysis requires a pretty large sample size\n\n# Getting game count by player\nplayer_games = rolling_df[\"About\"].value_counts()\n# Getting the players who have played more than 15 games\nplayers_met_min_games = player_games[player_games >= 15].index\n# Limiting rolling_df to only players in the list of players who have played 15 games\nrolling_df = rolling_df[rolling_df[\"About\"].isin(players_met_min_games)]\nprint(len(rolling_df[\"About\"].unique()))\n```\n\n### Creating Visualization 1 Color Palette\n```{python}\n# Getting the number of seasons per player, and getting a list of players who are in both seasons\nplayers_seasons = rolling_df.groupby('About')['Season'].nunique()\nplayers_in_both = players_seasons[players_seasons > 1].index.tolist()\n\n# Getting list of all players\nplayers = rolling_df['About'].unique()\n\n# Making a palette where players in 1 season are orange, and players in 2 seasons are navy\npalette = {player : ('orange' if player in players_in_both else 'lightgray') for player in players}\n```\n\n### Generating and Saving Visualization 1\n```{python}\n# Creating Figure and Flattening Axes\nfig, axs = plt.subplots(1, 2, figsize = (30, 10), sharey = True)\naxs = axs.flatten()\n\n# Looping through subplots and seasons\nfor ax, season in zip(axs, [1, 2]):\n    # Making plot of proportion of jumps in high band by player, for each season\n    plot = sns.lineplot(data = rolling_df[rolling_df[\"Season\"] == season], x = 'Date', y = \"Prop_Jump_High\", hue = \"About\", palette = palette, ax = ax)\n    plot_c = sns.lineplot(data = rolling_df[(rolling_df[\"Season\"] == season) & (rolling_df[\"About\"] == \"Athlete C\")], x = \"Date\", y = \"Prop_Jump_High\", color = 'navy', ax = ax)\n    ax.set_title(f\"Season {season} Rolling Average of High-Band Jump Proportion\", weight = 'bold')\n    sns.despine(top = True, right = True, ax = ax)\n\none_season_patch = mpatches.Patch(color = 'lightgray', label = 'One Season')\ntwo_season_patch = mpatches.Patch(color = 'orange', label = 'Two Seasons')\nathlete_c_patch = mpatches.Patch(color = \"navy\", label = \"Athlete C\")\n\nfor ax in axs:\n    ax.legend(handles = [one_season_patch, two_season_patch, athlete_c_patch], title = 'Player Seasons', loc = 'upper right')\n\n# Showing plots\nplt.savefig(\"./images/viz_1.png\")\nplt.show()\n```\n\n## Making Visualization 2\n\n### Creating \"Adjusted_Day\" Variable\n\n```{python}\n# Making a new variable which tells whether or not the player is in both seasons or just one\nrolling_df['Player_Group'] = rolling_df['About'].apply(lambda x: 'both_seasons' if x in players_in_both else 'one_season')\n\n# Getting the start date for each season\nseason_starts = rolling_df.groupby('Season')['Date'].min().to_dict()\n\n# Getting the number of days into the season for each season\nrolling_df['Day_of_Season'] = rolling_df.apply(lambda row: (row['Date'] - season_starts[row['Season']]).days + 1, axis=1)\n\n# Getting last day of season 1\nseason1_length = (rolling_df[rolling_df['Season'] == 1]['Date'].max() - season_starts[1]).days + 1\n\n# Function adds the number of days in the first season to the day in the second season\n    # This prevents for example the 5th day in the second season and the 5th day in the first season being seen as the same day\ndef adjust_day(row):\n    if row['Player_Group'] == 'both_seasons' and row['Season'] == 2:\n        return row['Day_of_Season'] + season1_length\n    else:\n        return row['Day_of_Season']\n\n# Adding the first season length to the second seasons\nrolling_df['Adjusted_Day'] = rolling_df.apply(adjust_day, axis=1)\n```\n\n### Generating and Saving Visualization 2\n```{python}\n# Filter for Athlete C\nAthlete_C = rolling_df[rolling_df[\"About\"] == \"Athlete C\"]\n\n# Plot both seasons on a single real-time timeline using Adjusted_Day\nplt.figure(figsize=(14, 6))\n\nsns.lineplot(data=Athlete_C, x='Adjusted_Day', y='Prop_Jump_High', marker='o', color='navy', label='High')\nsns.lineplot(data=Athlete_C, x='Adjusted_Day', y='Prop_Jump_Low', marker='o', color='orange', label='Low')\n\n# Optional: draw line at the transition between Season 1 and Season 2\nseason1_len = (rolling_df[rolling_df['Season'] == 1]['Date'].max() - rolling_df[rolling_df['Season'] == 1]['Date'].min()).days + 1\nplt.axvline(season1_len, linestyle='--', color='lightgray', label='Season Break')\n\n#plt.title(\"Athlete C Combined Seasons Jump Band Proportions (7-Game Rolling Avg)\", fontsize=16)\nplt.suptitle('Athlete C Combined Seasons Jump Band Proportions (7-Game Rolling Avg)'\n             , x = 0.275, y = 1.05, weight = \"bold\")\nplt.text(276, 0.33, \"High Band\", color = \"navy\", weight = \"bold\")\nplt.text(276, 0.3875, \"Low Band\", color = \"orange\", weight = \"bold\")\nplt.text(60, 0.55, \"Season 1\", color = \"gray\", weight = \"bold\")\nplt.text(180, 0.55, \"Season 2\", color = \"gray\", weight = \"bold\")\nplt.xlabel(\"Adjusted Day\", weight = \"bold\")\nplt.text(-15, 0.625, \"Proportion of Jumps\", weight = \"bold\")\nplt.ylabel(\"\")\n#plt.ylabel(\"Proportion of Jumps\")\n#plt.legend(title='Jump Band')\nplt.tight_layout()\nplt.gca().tick_params(axis = 'both', length = 0)\nsns.despine(top = True, right = True)\nplt.gca().get_legend().remove()\nplt.savefig(\"./images/viz_2.png\")\nplt.show()\n```\n\n## Making Visualization 3\n\n### Getting Daily Averages\n```{python}\n# Grouping by day of the season and whether or not the player was in both seasons, then taking the mean of the prop_jump_high\ndaily_means = rolling_df.groupby(['Adjusted_Day', 'Player_Group'])['Prop_Jump_High'].mean().reset_index()\n```\n\n### Getting Regression Lines for 1 and 2 Season Players\n```{python}\n# Making a dataframe to hold the required linear regression values\nlinreg_df = pd.DataFrame(columns=[\"Player_Group\", \"Slope\", \"Intercept\", \"R-value\"])\n\n# Looping through each unique player group\nfor group in daily_means[\"Player_Group\"].unique():\n    # Selecting the relevant data for the current player group\n    group_data = daily_means[daily_means[\"Player_Group\"] == group]\n    \n    # Running linear regression on Adjusted_Day vs Prop_Jump_High\n    slope, intercept, r_value, p_value, std_err = stats.linregress(group_data['Adjusted_Day'], group_data['Prop_Jump_High'])\n    \n    # Adding the linear regression results to the DataFrame\n    linreg_df.loc[len(linreg_df)] = [group, slope, intercept, r_value]\n\n# Showing the table with linear regression results\nlinreg_df.head()\n```\n\n### Generating and Saving Visualization 3\n```{python}\n# Making palette for below plot\npalette = {\n    \"both_seasons\" : \"navy\",\n    \"one_season\" : \"orange\"\n}\n\n# Making linear regression plot of prop_jump_high by # seasons played\nplot = sns.lmplot(\n    data = daily_means,\n    x = 'Adjusted_Day',\n    y = 'Prop_Jump_High',\n    hue = 'Player_Group',\n    palette = palette,\n    markers = [\"o\", \"s\"],\n    scatter_kws = {\"s\": 50, \"alpha\": 0.5},\n    height = 6,\n    aspect = 2\n)\n\nplt.axvline(x = season1_length, color = 'lightgray', linestyle = '--', label = \"Season Break\")\nplt.suptitle('Change in Mean Proportion of Jumps in High Band by Day for One and Two Season Players'\n             , x = 0.375, y = 1.09, weight = \"bold\")\nplt.xlabel('Adjusted Day', weight = 'bold')\nplt.text(-15, 0.3225, \"Mean Proportion of Jumps in High Band\", weight = \"bold\")\n#plt.ylabel('Mean Proportion of Jumps in High Band')\nplt.ylabel('')\nplt.text(275, 0.259, \"Two Seasons\", color = \"navy\", weight = 'bold')\nplt.text(150, 0.195, \"One Season\", color = \"orange\", weight = 'bold')\nplt.gca().tick_params(axis = 'both', length = 0)\nplot._legend.remove()\nplt.savefig(\"./images/viz_3.png\")\nplt.show()\n```","srcMarkdownNoYaml":"\n\n```{python}\n#| echo: false\n#| warning: false\n#| message: false\n\n# Imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport matplotlib.patches as mpatches\nfrom scipy import stats\n\n# Loading in data\ndata = pd.read_csv('./data/cleaned_data.csv')\n\n# Converting date to datetime\ndata[\"Date\"] = pd.to_datetime(data[\"Date\"])\n```\n\n## Making Visualization 1\n\n### Getting Rolling Averages for Visualization 1\n```{python}\n# This code chunk retrieves the n-game (7-game) rolling average of proportion of low, med, and high band jumps\n\n# Empty list to hold rolling_averages data\nrolling_averages = []\n\n# Variable for number of games in rolling average\nwindow = 7\n\n# Looping through each group of the df, where the groups are by player\nfor player, group in data.groupby(\"About\"):\n    # Ensuring the dates are in the correct order for the rolling average calculation\n    group = group.sort_values(by = \"Date\")\n\n    # Calculating the rolling averages, over window games, and assigning that to the new column made for that value\n    group[\"Prop_Jump_High\"]= group[\"Prop_Jump_High\"].rolling(window, min_periods = 1).mean()\n    group[\"Prop_Jump_Med\"]= group[\"Prop_Jump_Med\"].rolling(window, min_periods = 1).mean()\n    group[\"Prop_Jump_Low\"]= group[\"Prop_Jump_Low\"].rolling(window, min_periods = 1).mean()\n\n    # Appending the group to the list of groups to be put in a df later\n    rolling_averages.append(group)\n\n# Concatenating the rolling average groups. Each player/group is essentially a row in this new dataframe\nrolling_df = pd.concat(rolling_averages)\n\n# Filtering out players who have played less than 15 games, as our analysis requires a pretty large sample size\n\n# Getting game count by player\nplayer_games = rolling_df[\"About\"].value_counts()\n# Getting the players who have played more than 15 games\nplayers_met_min_games = player_games[player_games >= 15].index\n# Limiting rolling_df to only players in the list of players who have played 15 games\nrolling_df = rolling_df[rolling_df[\"About\"].isin(players_met_min_games)]\nprint(len(rolling_df[\"About\"].unique()))\n```\n\n### Creating Visualization 1 Color Palette\n```{python}\n# Getting the number of seasons per player, and getting a list of players who are in both seasons\nplayers_seasons = rolling_df.groupby('About')['Season'].nunique()\nplayers_in_both = players_seasons[players_seasons > 1].index.tolist()\n\n# Getting list of all players\nplayers = rolling_df['About'].unique()\n\n# Making a palette where players in 1 season are orange, and players in 2 seasons are navy\npalette = {player : ('orange' if player in players_in_both else 'lightgray') for player in players}\n```\n\n### Generating and Saving Visualization 1\n```{python}\n# Creating Figure and Flattening Axes\nfig, axs = plt.subplots(1, 2, figsize = (30, 10), sharey = True)\naxs = axs.flatten()\n\n# Looping through subplots and seasons\nfor ax, season in zip(axs, [1, 2]):\n    # Making plot of proportion of jumps in high band by player, for each season\n    plot = sns.lineplot(data = rolling_df[rolling_df[\"Season\"] == season], x = 'Date', y = \"Prop_Jump_High\", hue = \"About\", palette = palette, ax = ax)\n    plot_c = sns.lineplot(data = rolling_df[(rolling_df[\"Season\"] == season) & (rolling_df[\"About\"] == \"Athlete C\")], x = \"Date\", y = \"Prop_Jump_High\", color = 'navy', ax = ax)\n    ax.set_title(f\"Season {season} Rolling Average of High-Band Jump Proportion\", weight = 'bold')\n    sns.despine(top = True, right = True, ax = ax)\n\none_season_patch = mpatches.Patch(color = 'lightgray', label = 'One Season')\ntwo_season_patch = mpatches.Patch(color = 'orange', label = 'Two Seasons')\nathlete_c_patch = mpatches.Patch(color = \"navy\", label = \"Athlete C\")\n\nfor ax in axs:\n    ax.legend(handles = [one_season_patch, two_season_patch, athlete_c_patch], title = 'Player Seasons', loc = 'upper right')\n\n# Showing plots\nplt.savefig(\"./images/viz_1.png\")\nplt.show()\n```\n\n## Making Visualization 2\n\n### Creating \"Adjusted_Day\" Variable\n\n```{python}\n# Making a new variable which tells whether or not the player is in both seasons or just one\nrolling_df['Player_Group'] = rolling_df['About'].apply(lambda x: 'both_seasons' if x in players_in_both else 'one_season')\n\n# Getting the start date for each season\nseason_starts = rolling_df.groupby('Season')['Date'].min().to_dict()\n\n# Getting the number of days into the season for each season\nrolling_df['Day_of_Season'] = rolling_df.apply(lambda row: (row['Date'] - season_starts[row['Season']]).days + 1, axis=1)\n\n# Getting last day of season 1\nseason1_length = (rolling_df[rolling_df['Season'] == 1]['Date'].max() - season_starts[1]).days + 1\n\n# Function adds the number of days in the first season to the day in the second season\n    # This prevents for example the 5th day in the second season and the 5th day in the first season being seen as the same day\ndef adjust_day(row):\n    if row['Player_Group'] == 'both_seasons' and row['Season'] == 2:\n        return row['Day_of_Season'] + season1_length\n    else:\n        return row['Day_of_Season']\n\n# Adding the first season length to the second seasons\nrolling_df['Adjusted_Day'] = rolling_df.apply(adjust_day, axis=1)\n```\n\n### Generating and Saving Visualization 2\n```{python}\n# Filter for Athlete C\nAthlete_C = rolling_df[rolling_df[\"About\"] == \"Athlete C\"]\n\n# Plot both seasons on a single real-time timeline using Adjusted_Day\nplt.figure(figsize=(14, 6))\n\nsns.lineplot(data=Athlete_C, x='Adjusted_Day', y='Prop_Jump_High', marker='o', color='navy', label='High')\nsns.lineplot(data=Athlete_C, x='Adjusted_Day', y='Prop_Jump_Low', marker='o', color='orange', label='Low')\n\n# Optional: draw line at the transition between Season 1 and Season 2\nseason1_len = (rolling_df[rolling_df['Season'] == 1]['Date'].max() - rolling_df[rolling_df['Season'] == 1]['Date'].min()).days + 1\nplt.axvline(season1_len, linestyle='--', color='lightgray', label='Season Break')\n\n#plt.title(\"Athlete C Combined Seasons Jump Band Proportions (7-Game Rolling Avg)\", fontsize=16)\nplt.suptitle('Athlete C Combined Seasons Jump Band Proportions (7-Game Rolling Avg)'\n             , x = 0.275, y = 1.05, weight = \"bold\")\nplt.text(276, 0.33, \"High Band\", color = \"navy\", weight = \"bold\")\nplt.text(276, 0.3875, \"Low Band\", color = \"orange\", weight = \"bold\")\nplt.text(60, 0.55, \"Season 1\", color = \"gray\", weight = \"bold\")\nplt.text(180, 0.55, \"Season 2\", color = \"gray\", weight = \"bold\")\nplt.xlabel(\"Adjusted Day\", weight = \"bold\")\nplt.text(-15, 0.625, \"Proportion of Jumps\", weight = \"bold\")\nplt.ylabel(\"\")\n#plt.ylabel(\"Proportion of Jumps\")\n#plt.legend(title='Jump Band')\nplt.tight_layout()\nplt.gca().tick_params(axis = 'both', length = 0)\nsns.despine(top = True, right = True)\nplt.gca().get_legend().remove()\nplt.savefig(\"./images/viz_2.png\")\nplt.show()\n```\n\n## Making Visualization 3\n\n### Getting Daily Averages\n```{python}\n# Grouping by day of the season and whether or not the player was in both seasons, then taking the mean of the prop_jump_high\ndaily_means = rolling_df.groupby(['Adjusted_Day', 'Player_Group'])['Prop_Jump_High'].mean().reset_index()\n```\n\n### Getting Regression Lines for 1 and 2 Season Players\n```{python}\n# Making a dataframe to hold the required linear regression values\nlinreg_df = pd.DataFrame(columns=[\"Player_Group\", \"Slope\", \"Intercept\", \"R-value\"])\n\n# Looping through each unique player group\nfor group in daily_means[\"Player_Group\"].unique():\n    # Selecting the relevant data for the current player group\n    group_data = daily_means[daily_means[\"Player_Group\"] == group]\n    \n    # Running linear regression on Adjusted_Day vs Prop_Jump_High\n    slope, intercept, r_value, p_value, std_err = stats.linregress(group_data['Adjusted_Day'], group_data['Prop_Jump_High'])\n    \n    # Adding the linear regression results to the DataFrame\n    linreg_df.loc[len(linreg_df)] = [group, slope, intercept, r_value]\n\n# Showing the table with linear regression results\nlinreg_df.head()\n```\n\n### Generating and Saving Visualization 3\n```{python}\n# Making palette for below plot\npalette = {\n    \"both_seasons\" : \"navy\",\n    \"one_season\" : \"orange\"\n}\n\n# Making linear regression plot of prop_jump_high by # seasons played\nplot = sns.lmplot(\n    data = daily_means,\n    x = 'Adjusted_Day',\n    y = 'Prop_Jump_High',\n    hue = 'Player_Group',\n    palette = palette,\n    markers = [\"o\", \"s\"],\n    scatter_kws = {\"s\": 50, \"alpha\": 0.5},\n    height = 6,\n    aspect = 2\n)\n\nplt.axvline(x = season1_length, color = 'lightgray', linestyle = '--', label = \"Season Break\")\nplt.suptitle('Change in Mean Proportion of Jumps in High Band by Day for One and Two Season Players'\n             , x = 0.375, y = 1.09, weight = \"bold\")\nplt.xlabel('Adjusted Day', weight = 'bold')\nplt.text(-15, 0.3225, \"Mean Proportion of Jumps in High Band\", weight = \"bold\")\n#plt.ylabel('Mean Proportion of Jumps in High Band')\nplt.ylabel('')\nplt.text(275, 0.259, \"Two Seasons\", color = \"navy\", weight = 'bold')\nplt.text(150, 0.195, \"One Season\", color = \"orange\", weight = 'bold')\nplt.gca().tick_params(axis = 'both', length = 0)\nplot._legend.remove()\nplt.savefig(\"./images/viz_3.png\")\nplt.show()\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"dataviz.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":{"light":"minty"},"backgroundcolor":"#FFFFFF","title":"Data Visualization"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}